install.packages('colorout', repos = 'https://community.r-multiverse.org')
install.packages(c("table1", "tcltk", "tensor", "tensorA", "tensorflow", "tergm", "terra", "testthat", "text2vec", "textclean", "textshape", "textshaping", "tfautograph", "tfdatasets", "tfruns", "TH.data", "threejs", "ThreeWay", "tibble", "tictoc", "tidyAML", "TidyDensity", "tidygraph", "tidymodels", "tidyquant", "tidyr", "tidyRSS", "tidyselect", "tidytext", "tidytree", "tidyverse", "timechange", "timeDate", "timeSeries", "timetk", "timevis", "tinytex", "tippy", "tm", "TMB", "tmvnsim", "tnet", "tokenizers", "tools", "torch", "treeio", "treeWAS", "triebeard", "truncnorm", "truncreg", "trust", "tseries", "tsfeatures", "tsna", "tsne", "TSP", "TTR", "tune", "tweedie", "tweenr", "twosamples", "tzdb", "ucminf", "udpipe", "umap", "units", "urca", "urlchecker", "urltools", "useful", "usethis", "utf8", "utils", "uuid", "uwot", "V8", "varbvs", "VariantAnnotation", "vcd", "vctrs", "vdiffr", "vegan", "venn", "VennDiagram", "VGAM", "VIM", "vip", "vipor", "viridis", "viridisLite", "visNetwork", "VisuNet", "vroom", "vscDebugger", "vtreat", "waffle", "waiter", "waldo", "warp", "wdm", "webdriver", "webr", "webshot", "websocket", "webutils", "WGCNA", "whisker", "whoami", "withr", "wk", "workflows", "workflowsets", "wrapr", "writexl", "WRS2", "xaringan", "xfun", "xgboost", "XML", "xml2", "xmlparsedata", "xopen", "xtable", "xts", "XVector", "yaImpute", "yaml", "yardstick", "yesno", "yulab.utils", "zeallot", "zip", "zlibbioc", "zoo", "ztable"))
quit
BiocManager::install(c("edgeR", "limma", "DESeq2", "ctc", "Biobase", "gplots", "ape", "argparse"))
install.packages("curl")
install.packages("curl")
install.packages("htt")
install.packages("httr")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("debrowser")
BiocManager::install(c("edgeR", "limma", "DESeq2", "ctc", "Biobase", "gplots", "ape", "argparse"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.21")
BiocManager::install(c("edgeR", "limma", "DESeq2", "ctc", "Biobase", "gplots", "ape", "argparse"))
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("PANTHER.db")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pathview")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
if (!requireNamespace('BiocManager', quietly = TRUE))
install.packages('BiocManager')
BiocManager::install('PCAtools')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("igvR")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnhancedVolcano")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SeqGSEA")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GOexpress")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("metaseqR2")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Rvisdiff")
install.packages("rstudioapi")
rstudioapi::addTheme("https://raw.githubusercontent.com/davidgibsonp/ayu-rstudio/master/rstheme/ayu-mirage.rstheme",
apply = TRUE, force = TRUE)
install.packages(c("rstudioapi","devtools"))
install.packages(c("rstudioapi", "devtools"))
rstudioapi::addTheme("https://raw.githubusercontent.com/TheMrKingent/KandleTheme/master/inst/themes/Kandle.rstheme", apply = TRUE)
remotes::install_github("rileytwo/darkstudio")
install.packages('IRkernel')
IRkernel::installspec()
IR\
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
install.packages('IRkernel')
IRkernel::installspec()
install.packages(c("ggstatsplot", "diagrammer", "janitor", "gtsummary", "lintr", "hrbrthemes"))
install.packages("Diagrammer"))
install.packages("Diagrammer")
install.packages("DiagrammeR")
install.packages(c("ggdist", "posterdown"))
setwd("~/Desktop/")
library(stringr)
library(org.Hs.eg.db)
library(readr)
read.delim("finalpawel.matrix")
analysis <- read.delim("finalpawel.matrix")
readfile <- read.delim("finalpawel.matrix")
oldrownames <- rownames(readfile)
ensembldataframe <- as.data.frame(readfile)
newrownames <- vector(length = length(oldrownames))
for (i in seq_along(oldrownames)) {
newrownames[i] <- str_split(oldrownames[i], "\\.")[[1]][1]
}
symbols <- mapIds(org.Hs.eg.db,
keys = newrownames,
column = c("SYMBOL"), keytype = "ENSEMBL"
)
oldrownames
newrownames
newrownames
oldrownames <- rownames(readfile)
ensembldataframe <- as.data.frame(readfile)
newrownames <- vector(length = length(oldrownames))
for (i in seq_along(oldrownames)) {
newrownames[i] <- str_split(oldrownames[i], "\\.")[[1]][1]
}
symbols <- mapIds(org.Hs.eg.db,
keys = newrownames,
column = c("SYMBOL"), keytype = "ENSEMBL"
)
ensembldataframe
oldrownames <- rownames(readfile)
ensembldataframe <- as.data.frame(readfile)
newrownames <- vector(length = length(oldrownames))
for (i in seq_along(oldrownames)) {
newrownames[i] <- str_split(oldrownames[i], "\\.")[[1]][1]
}
symbols <- mapIds(org.Hs.eg.db,
keys = newrownames,
column = c("SYMBOL"), keytype = "ENSEMBL"
)
head(ensembldataframe)
ensembldataframe[,1]
ensembldataframe <- as.data.frame(readfile)
oldrownames <- ensembldataframe[,1]
newrownames <- vector(length = length(oldrownames))
for (i in seq_along(oldrownames)) {
newrownames[i] <- str_split(oldrownames[i], "\\.")[[1]][1]
}
symbols <- mapIds(org.Hs.eg.db,
keys = newrownames,
column = c("SYMBOL"), keytype = "ENSEMBL"
)
symbols
ensembldataframe <- as.data.frame(readfile)
oldrownames <- ensembldataframe[,1]
newrownames <- vector(length = length(oldrownames))
for (i in seq_along(oldrownames)) {
newrownames[i] <- str_split(oldrownames[i], "\\.")[[1]][1]
}
symbols <- mapIds(org.Hs.eg.db,
keys = newrownames,
column = c("SYMBOL"), keytype = "ENSEMBL"
)
symbolsdataframe <- as.data.frame(symbols)
symbolsdataframe_rownames <- rownames(symbolsdataframe)
namesgenesdataframe <- symbolsdataframe[, 1]
genenames <- vector(length = length(symbolsdataframe_rownames))
for (i in seq_along(symbolsdataframe_rownames)) {
if (symbolsdataframe_rownames[i] == newrownames[i]) {
genenames[i] <- namesgenesdataframe[i]
}
}
output <- cbind(genenames, ensembldataframe)
ensemblid <- rownames(output)
finaloutput_with_genes <- as.data.frame(cbind(ensemblid, output))
finaloutput_with_genes
readfile
oldrownames <- ensembldataframe[, 1]
newrownames <- vector(length = length(oldrownames))
for (i in seq_along(oldrownames)) {
newrownames[i] <- str_split(oldrownames[i], "\\.")[[1]][1]
}
symbols <- mapIds(org.Hs.eg.db,
keys = newrownames,
column = c("SYMBOL"), keytype = "ENSEMBL"
)
symbolsdataframe <- as.data.frame(symbols)
symbolsdataframe_rownames <- rownames(symbolsdataframe)
namesgenesdataframe <- symbolsdataframe[, 1]
genenames <- vector(length = length(symbolsdataframe_rownames))
for (i in seq_along(symbolsdataframe_rownames)) {
if (symbolsdataframe_rownames[i] == newrownames[i]) {
genenames[i] <- namesgenesdataframe[i]
}
}
output <- cbind(genenames, ensembldataframe)
ensemblid <- rownames(output)
finaloutput_with_genes <- as.data.frame(cbind(ensemblid, output))
finaloutput_with_genes
readfile
ensembldataframe <- as.data.frame(readfile)
oldrownames <- ensembldataframe[, 1]
newrownames <- vector(length = length(oldrownames))
for (i in seq_along(oldrownames)) {
newrownames[i] <- str_split(oldrownames[i], "\\.")[[1]][1]
}
symbols <- mapIds(org.Hs.eg.db,
keys = newrownames,
column = c("SYMBOL"), keytype = "ENSEMBL"
)
symbolsdataframe <- as.data.frame(symbols)
symbolsdataframe_rownames <- rownames(symbolsdataframe)
namesgenesdataframe <- symbolsdataframe[, 1]
genenames <- vector(length = length(symbolsdataframe_rownames))
for (i in seq_along(symbolsdataframe_rownames)) {
if (symbolsdataframe_rownames[i] == newrownames[i]) {
genenames[i] <- namesgenesdataframe[i]
}
}
output <- cbind(genenames, ensembldataframe)
ensemblid <- rownames(output)
finaloutput_with_genes <- as.data.frame(cbind(ensemblid, output))
finaloutput_without_names <- as.data.frame(output)
write_delim(finaloutput_with_genes, file = opt$out, delim = " ")
ensembldataframe <- as.data.frame(readfile)
oldrownames <- ensembldataframe[, 1]
newrownames <- vector(length = length(oldrownames))
for (i in seq_along(oldrownames)) {
newrownames[i] <- str_split(oldrownames[i], "\\.")[[1]][1]
}
symbols <- mapIds(org.Hs.eg.db,
keys = newrownames,
column = c("SYMBOL"), keytype = "ENSEMBL"
)
symbolsdataframe <- as.data.frame(symbols)
symbolsdataframe_rownames <- rownames(symbolsdataframe)
namesgenesdataframe <- symbolsdataframe[, 1]
genenames <- vector(length = length(symbolsdataframe_rownames))
for (i in seq_along(symbolsdataframe_rownames)) {
if (symbolsdataframe_rownames[i] == newrownames[i]) {
genenames[i] <- namesgenesdataframe[i]
}
}
output <- cbind(genenames, ensembldataframe)
ensemblid <- rownames(output)
finaloutput_with_genes <- as.data.frame(cbind(ensemblid, output))
finaloutput_without_names <- as.data.frame(output)
write_delim(finaloutput_with_genes, file = pawelanalysis.txt, delim = " ")
ensembldataframe <- as.data.frame(readfile)
oldrownames <- ensembldataframe[, 1]
newrownames <- vector(length = length(oldrownames))
for (i in seq_along(oldrownames)) {
newrownames[i] <- str_split(oldrownames[i], "\\.")[[1]][1]
}
symbols <- mapIds(org.Hs.eg.db,
keys = newrownames,
column = c("SYMBOL"), keytype = "ENSEMBL"
)
symbolsdataframe <- as.data.frame(symbols)
symbolsdataframe_rownames <- rownames(symbolsdataframe)
namesgenesdataframe <- symbolsdataframe[, 1]
genenames <- vector(length = length(symbolsdataframe_rownames))
for (i in seq_along(symbolsdataframe_rownames)) {
if (symbolsdataframe_rownames[i] == newrownames[i]) {
genenames[i] <- namesgenesdataframe[i]
}
}
output <- cbind(genenames, ensembldataframe)
ensemblid <- rownames(output)
finaloutput_with_genes <- as.data.frame(cbind(ensemblid, output))
finaloutput_without_names <- as.data.frame(output)
write_delim(finaloutput_with_genes, file = pawelanalysis.txt, delim = " ")
getwd()
ensembldataframe <- as.data.frame(readfile)
oldrownames <- ensembldataframe[, 1]
newrownames <- vector(length = length(oldrownames))
for (i in seq_along(oldrownames)) {
newrownames[i] <- str_split(oldrownames[i], "\\.")[[1]][1]
}
symbols <- mapIds(org.Hs.eg.db,
keys = newrownames,
column = c("SYMBOL"), keytype = "ENSEMBL"
)
symbolsdataframe <- as.data.frame(symbols)
symbolsdataframe_rownames <- rownames(symbolsdataframe)
namesgenesdataframe <- symbolsdataframe[, 1]
genenames <- vector(length = length(symbolsdataframe_rownames))
for (i in seq_along(symbolsdataframe_rownames)) {
if (symbolsdataframe_rownames[i] == newrownames[i]) {
genenames[i] <- namesgenesdataframe[i]
}
}
output <- cbind(genenames, ensembldataframe)
ensemblid <- rownames(output)
finaloutput_with_genes <- as.data.frame(cbind(ensemblid, output))
finaloutput_without_names <- as.data.frame(output)
finaloutput_with_genes
finaloutput_without_names
write_delim(finaloutput_with_genes, file="pawelanalysis.genes.txt", delim = " ")
write_delim(finaloutput_without_names, file = "pawelanalysis.genes.names.txt", delim = " ")
finaloutput_with_genes
head(finaloutput_with_genes)
head(finaloutput_with_genes[-2])
head(finaloutput_with_genes[-1])
head(finaloutput_with_genes[-3])
allgenes <- finaloutput_with_genes[-3]
write_delim(allgenes, file = "pawelanalysis.genes.all.txt", delim = " ")
getwd()
setwd("~/Desktop/rdiffer/")
lint("rdiffer.R")
lintr("rdiffer.R")
head(finaloutput_with_genes)
head(finaloutput_without_names)
head(finaloutput_with_genes[,-1])
